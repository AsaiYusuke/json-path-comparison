// JSON Grammar
// ============
// Taken from https://github.com/pegjs/pegjs/blob/master/examples/json.pegjs.
// Adapted to avoid name clashes, would love to see
// https://github.com/pegjs/pegjs/issues/523 instead.
//
// Based on the grammar from RFC 7159 [1].
//
// Note that JSON is also specified in ECMA-262 [2], ECMA-404 [3], and on the
// JSON website [4] (somewhat informally). The RFC seems the most authoritative
// source, which is confirmed e.g. by [5].
//
// [1] http://tools.ietf.org/html/rfc7159
// [2] http://www.ecma-international.org/publications/standards/Ecma-262.htm
// [3] http://www.ecma-international.org/publications/standards/Ecma-404.htm
// [4] http://json.org/
// [5] https://www.tbray.org/ongoing/When/201x/2014/03/05/RFC7159-JSON

// ----- 2. JSON Grammar -----

JSON_text
  = JSON_ws value:JSON_value JSON_ws { return value; }

JSON_ws "whitespace" = [ \t\n\r]*

// ----- 3. Values -----

JSON_value
  = "false" { return false; }
  / "null"  { return null;  }
  / "true"  { return true;  }
  / JSON_object
  / JSON_array
  / JSON_number
  / JSON_string

// ----- 4. Objects -----

JSON_object
  = JSON_ws "{" JSON_ws
    members:(
      head:JSON_member
      tail:(JSON_ws "," JSON_ws m:JSON_member { return m; })*
      {
        var result = {};

        [head].concat(tail).forEach(function(element) {
          result[element.name] = element.value;
        });

        return result;
      }
    )?
    JSON_ws "}" JSON_ws
    { return members !== null ? members: {}; }

JSON_member
  = name:JSON_string JSON_ws ":" JSON_ws value:JSON_value {
      return { name: name, value: value };
    }

// ----- 5. Arrays -----

JSON_array
  = JSON_ws "[" JSON_ws
    values:(
      head:JSON_value
      tail:(JSON_ws "," JSON_ws v:JSON_value { return v; })*
      { return [head].concat(tail); }
    )?
    JSON_ws "]" JSON_ws
    { return values !== null ? values : []; }

// ----- 6. Numbers -----

JSON_number "number"
  = "-"? JSON_int JSON_frac? JSON_exp? { return parseFloat(text()); }

JSON_exp
  = [eE] ("-" / "+")? [0-9]+

JSON_frac
  = "." [0-9]+

JSON_int
  = "0" / ([1-9] [0-9]*)

// ----- 7. Strings -----

JSON_string "string"
  = '"' chars:JSON_char* '"' { return chars.join(""); }

JSON_char
  = [^\0-\x1F\x22\x5C]
  / "\\"
    sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$([0-9a-f]i [0-9a-f]i [0-9a-f]i [0-9a-f]i) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }
