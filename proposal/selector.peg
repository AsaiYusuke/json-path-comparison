start
  = "$" operators:operators { return operators; }

operators
  = operators:operator* { return operators.reduce((os, o) => os.concat(o), []); }

operator
  = dotNotation
  / union
  / recursiveDescentWithChildren

dotNotation
  = "." children:identifier { return children; }

// TODO Unicode
identifier
  = chars:[a-zA-Z0-9_\-]+ { return [['children', [['index', chars.join("")]]]]; }
  / "*" { return [['children', [['all']]]]; }

union
  = "[" " "* children:bracketElements " "* "]" { return [['children', children]]; }

bracketElements
  = x:bracketElement " "* "," " "* xs:bracketElements { return [x].concat(xs); }
  / x:bracketElement { return [x]; }

bracketElement
  = "'" element:singleQuotedString "'" { return ['index', element]; }
  / '"' element:doubleQuotedString '"' { return ['index', element]; }
  / "*" { return ['all']; }
  / start:number? ":" end:number? ":" step:nonZeroNumber? { return ['slice', start, end, step]; }
  / start:number? ":" end:number? { return ['slice', start, end, null]; }
  / element:number { return ['index', element]; }
  / "?(" filterExpression:filterExpression ")" { return ['filter', filterExpression]; }

singleQuotedString
  = x:"\\'" xs:singleQuotedString { return x.replace('\\', '') + xs; }
  / x:[^'] xs:singleQuotedString { return x + xs; }
  / ''

doubleQuotedString
  = x:'\\"' xs:doubleQuotedString { return x.replace('\\', '') + xs; }
  / x:[^"] xs:doubleQuotedString { return x + xs; }
  / ''

number
  = "-"? absoluteNumber { return text(); }

nonZeroNumber
  = "-"? [1-9] absoluteNumber? { return text(); }

absoluteNumber
  = [0-9]+ { return text(); }

filterExpression
  = "@" operators:operators { return ["hasValue", operators]; }

recursiveDescentWithChildren
  = ".." children:identifier { return [['recursiveDescent']].concat(children); }
  / ".." children:union { return [['recursiveDescent']].concat(children); }
