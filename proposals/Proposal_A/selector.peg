Start
  = "$" operators:Operator* { return operators.reduce((os, o) => [...os, ...o], []); }

Operator
  = DotChild
  / BracketChildren
  / RecursiveDescentChildren

DotChild
  = "." childName:DotChildName { return [['children', [['name', childName]]]]; }
  / ".*" { return [['children', [['all']]]]; }

DotChildName
  = [^\.\*\[\]\(\)@\?\|& ,:=<>!"'\\]+ { return text(); }

BracketChildren
  = "[" ws children:BracketElements ws "]" { return [['children', children]]; }

BracketElements
  = x:BracketElement ws "," ws xs:BracketElements { return [x, ...xs]; }
  / x:BracketElement { return [x]; }

BracketElement
  = "*" { return ['all']; }
  / start:Integer? ":" end:Integer? ":" step:NonZeroInteger? { return ['slice', start, end, step]; }
  / start:Integer? ":" end:Integer? { return ['slice', start, end, null]; }
  / "?(" filterExpression:FilterExpression ")" { return ['filter', filterExpression]; }
  / BracketChild

BracketChild
  = "'" name:SingleQuotedString "'" { return ['name', name]; }
  / '"' name:DoubleQuotedString '"' { return ['name', name]; }
  / index:Integer { return ['index', index]; }

RecursiveDescentChildren
  = ".." childName:DotChildName { return [['recursiveDescent'], ['children', [['name', childName]]]]; }
  / "..*" { return [['recursiveDescent'], ['children', [['all']]]]; }
  / ".." children:BracketChildren { return [['recursiveDescent'], ...children]; }

FilterExpression
  = x:HigherPrecedenceFilterExpression ws "&&" ws xs:LogicalAndRightHandSide { return ["and", ["expression", x], ...xs]; }
  / x:HigherPrecedenceFilterExpression ws "||" ws xs:LogicalOrRightHandSide { return ["or", ["expression", x], ...xs]; }
  / HigherPrecedenceFilterExpression

HigherPrecedenceFilterExpression
  = left:FilterValue ws op:ComparisonOperator ws right:FilterValue { return [op, ["value", left], ["value", right]]; }
  / UnaryFilterExpression

LogicalAndRightHandSide
  = x:HigherPrecedenceFilterExpression ws "&&" ws xs:LogicalAndRightHandSide { return [["expression", x], ...xs]; }
  / expression:HigherPrecedenceFilterExpression { return [["expression", expression]]; }

LogicalOrRightHandSide
  = x:HigherPrecedenceFilterExpression ws "||" ws xs:LogicalOrRightHandSide { return [["expression", x], ...xs]; }
  / expression:HigherPrecedenceFilterExpression { return [["expression", expression]]; }

UnaryFilterExpression
  = value:FilterValue { return ["hasValue", ["value", value]]; }
  / "!" ws expression:UnaryFilterExpression { return ["not", ["expression", expression]]; }
  / "(" ws expression:FilterExpression ws ")" { return expression; }

ComparisonOperator
  = "==" { return "equals"; }
  / "!=" { return "notEquals"; }
  / "<=" { return "lessThanOrEqual"; }
  / ">=" { return "greaterThanOrEqual"; }
  / "<" { return "lessThan"; }
  / ">" { return "greaterThan"; }

FilterValue
  = "@" operators:ScalarOperator* { return ["current", operators]; }
  / "$" operators:ScalarOperator* { return ["root", operators]; }
  / constant:SimpleValue { return ["constant", constant]; }

ScalarOperator
  = "." childName:DotChildName { return ['children', [['name', childName]]]; }
  / "[" ws child:BracketChild ws "]" { return ['children', [child]]; }

SimpleValue
  = "'" string:SingleQuotedString "'" { return string; }
  / '"' string:DoubleQuotedString '"' { return string; }
  / "false" { return false; }
  / "true" { return true; }
  / "null" { return null; }
  / Number

SingleQuotedString
  = x:"\\'" xs:SingleQuotedString { return "'" + xs; }
  / x:"\\\\" xs:SingleQuotedString { return "\\" + xs; }
  / x:[^'] xs:SingleQuotedString { return x + xs; }
  / ''

DoubleQuotedString
  = x:'\\"' xs:DoubleQuotedString { return '"' + xs; }
  / x:'\\\\' xs:DoubleQuotedString { return "\\" + xs; }
  / x:[^"] xs:DoubleQuotedString { return x + xs; }
  / ''

Integer
  = "-"? ( "0" / ([1-9] [0-9]*) ) { return parseInt(text(), 10); }

NonZeroInteger
  = "-"? [1-9] [0-9]* { return parseInt(text(), 10); }

Number
  = "-"? IntegerPart Fraction? Exponent? { return parseFloat(text()); }

Exponent
  = [eE] ("-" / "+")? [0-9]+

Fraction
  = "." [0-9]+

IntegerPart
  = "0" / ([1-9] [0-9]*)

ws
  = " "*
