# This file was generated by src/compile_regression_suite.sh from https://github.com/cburgmer/json-path-comparison/
# You probably don't want to change this manually but rather trigger a rebuild in the upstream source.

implementation: JavaScript_jsonpath-plus
queries:
  - id: array_index
    selector: $[2]
    scalar: true
    document: ["first", "second", "third", "forth", "fifth"]
    result: ["third"]
    status: pass
  - id: array_index_dot_notation
    selector: $.2
    scalar: true
    document: ["first", "second", "third", "forth", "fifth"]
    result: ["third"]
    status: open
  - id: array_index_last
    selector: $[-1]
    scalar: true
    document: ["first", "second", "third"]
    result: []
    status: open
  - id: array_index_out_of_bounds
    selector: $[1]
    scalar: true
    document: ["one element"]
    result: []
    status: open
  - id: array_index_slice_end_out_of_bounds
    selector: $[1:10]
    scalar: false
    document: ["first", "second", "third"]
    result: ["second", "third"]
    status: pass
  - id: array_index_slice_last_no_end
    selector: $[-1:]
    scalar: false
    document: ["first", "second", "third"]
    result: ["third"]
    status: pass
  - id: array_index_slice_no_start_no_end
    selector: $[:]
    scalar: false
    document: ["first", "second"]
    result: ["first", "second"]
    status: pass
  - id: array_index_slice_only_end
    selector: $[:2]
    scalar: false
    document: ["first", "second", "third", "forth", "fifth"]
    result: ["first", "second"]
    status: pass
  - id: array_index_slice_only_start
    selector: $[1:]
    scalar: false
    document: ["first", "second", "third", "forth", "fifth"]
    result: ["second", "third", "forth", "fifth"]
    status: pass
  - id: array_index_slice_start_end
    selector: $[1:3]
    scalar: false
    document: ["first", "second", "third", "forth", "fifth"]
    result: ["second", "third"]
    status: pass
  - id: array_index_slice_start_end_step
    selector: $[0:3:2]
    scalar: false
    document: ["first", "second", "third", "forth", "fifth"]
    result: ["first", "third"]
    status: pass
  - id: array_index_slice_start_end_step_0
    selector: $[0:3:0]
    scalar: false
    document: ["first", "second", "third", "forth", "fifth"]
    result: ["first", "second", "third"]
    status: open
  - id: array_index_slice_start_end_step_1
    selector: $[0:3:1]
    scalar: false
    document: ["first", "second", "third", "forth", "fifth"]
    result: ["first", "second", "third"]
    status: pass
  - id: array_index_slice_start_end_step_non_aligned
    selector: $[0:4:2]
    scalar: false
    document: ["first", "second", "third", "forth", "fifth"]
    result: ["first", "third"]
    status: pass
  - id: array_index_slice_start_equals_end
    selector: $[0:0]
    scalar: false
    document: ["first", "second"]
    result: ["first", "second"]
    status: open
  - id: array_index_slice_start_plus_one
    selector: $[0:1]
    scalar: false
    document: ["first", "second"]
    result: ["first"]
    status: pass
  - id: array_index_union
    selector: $[0,1]
    scalar: false
    document: ["first", "second", "third"]
    result: ["first", "second"]
    status: pass
  - id: key_bracket_notation
    selector: $['key']
    scalar: true
    document: {"key": "value"}
    result: ["value"]
    status: pass
  - id: key_bracket_notation_union
    selector: $['key','another']
    scalar: false
    document: {"another": "entry", "key": "value"}
    result: []
    status: fail
  - id: key_bracket_notation_with_double_quotes
    selector: $["key"]
    scalar: true
    document: {"key": "value"}
    result: []
    status: open
  - id: key_bracket_notation_with_number
    selector: $['0']
    scalar: true
    document: {"0": "value"}
    result: ["value"]
    status: pass
  - id: key_bracket_notation_with_number_without_quotes
    selector: $[0]
    scalar: true
    document: {"0": "value"}
    result: ["value"]
    status: open
  - id: key_bracket_notation_with_single_quote
    selector: $['single'quote']
    scalar: true
    document: {"single'quote": "value"}
    result: ["value"]
    status: open
  - id: key_bracket_notation_with_single_quote_escaped
    selector: $['single\'quote']
    scalar: true
    document: {"single'quote": "value"}
    result: []
    status: open
  - id: key_bracket_notation_with_special_characters
    selector: $['special:"chars']
    scalar: true
    document: {"special:\"chars": "value"}
    result: ["value"]
    status: pass
  - id: key_bracket_notation_with_star_literal
    selector: $['*']
    scalar: true
    document: {"*": "value"}
    result: ["value"]
    status: pass
  - id: key_bracket_notation_without_quotes
    selector: $[key]
    scalar: true
    document: {"key": "value"}
    result: ["value"]
    status: open
  - id: key_dot_notation
    selector: $.key
    scalar: true
    document: {"key": "value"}
    result: ["value"]
    status: pass
  - id: key_dot_notation_not_found
    selector: $.missing
    scalar: true
    document: {"key": "value"}
    result: []
    status: open
  - id: key_dot_notation_on_array
    selector: $.key
    scalar: true
    document: [0, 1]
    result: []
    status: open
  - id: key_dot_notation_on_array_of_matching_object
    selector: $.key
    scalar: true
    document: [{"key": "value"}]
    result: []
    status: open
  - id: key_dot_notation_with_array_value
    selector: $.key
    scalar: true
    document: {"key": ["first", "second"]}
    result: [["first", "second"]]
    status: pass
  - id: recursive_array_index
    selector: $..[0]
    scalar: false
    document: ["first", {"key": ["first nested", {"more": [{"nested": ["deepest", "second"]}, ["more", "values"]]}]}]
    result: ["first", "first nested", {"nested": ["deepest", "second"]}, "deepest", "more"]
    status: open
  - id: recursive_key
    selector: $..key
    scalar: false
    document: {"object": {"array": [{"key": "something"}, {"key": {"key": "russian dolls"}}], "key": "value"}, "key": "top"}
    result: ["top", "value", "something", {"key": "russian dolls"}, "russian dolls"]
    status: pass
  - id: recursive_wildcard
    selector: $..*
    scalar: false
    document: {"another key": {"primitives": [0, 1], "complex": "string"}, "key": "value"}
    result: ["value", {"primitives": [0, 1], "complex": "string"}, "string", [0, 1], 0, 1]
    status: open
  - id: recursive_wildcard_on_scalar
    selector: $..*
    scalar: false
    document: 42
    result: []
    status: open
  - id: recursive_with_nested_object
    selector: $.store..price
    scalar: false
    document: {"store": {"book": [{"category": "reference", "price": 8.95, "title": "Sayings of the Century", "author": "Nigel Rees"}, {"category": "fiction", "price": 12.99, "title": "Sword of Honour", "author": "Evelyn Waugh"}, {"category": "fiction", "price": 8.99, "title": "Moby Dick", "isbn": "0-553-21311-3", "author": "Herman Melville"}, {"category": "fiction", "price": 22.99, "title": "The Lord of the Rings", "isbn": "0-395-19395-8", "author": "J. R. R. Tolkien"}], "bicycle": {"color": "red", "price": 19.95}}}
    result: [8.95, 12.99, 8.99, 22.99, 19.95]
    status: pass
  - id: root
    selector: $
    scalar: true
    document: {"another key": {"complex": ["a", 1]}, "key": "value"}
    result: [{"another key": {"complex": ["a", 1]}, "key": "value"}]
    status: pass
  - id: wildcard_bracket_notation_on_array
    selector: $[*]
    scalar: false
    document: ["string", 42, {"key": "value"}, [0, 1]]
    result: ["string", 42, {"key": "value"}, [0, 1]]
    status: pass
  - id: wildcard_bracket_notation_on_object
    selector: $[*]
    scalar: false
    document: {"int": 42, "array": [0, 1], "object": {"key": "value"}, "some": "string"}
    result: ["string", 42, {"key": "value"}, [0, 1]]
    status: pass
  - id: wildcard_dot_notation_on_array
    selector: $.*
    scalar: false
    document: ["string", 42, {"key": "value"}, [0, 1]]
    result: ["string", 42, {"key": "value"}, [0, 1]]
    status: pass
  - id: wildcard_dot_notation_on_object
    selector: $.*
    scalar: false
    document: {"int": 42, "array": [0, 1], "object": {"key": "value"}, "some": "string"}
    result: ["string", 42, {"key": "value"}, [0, 1]]
    status: pass
